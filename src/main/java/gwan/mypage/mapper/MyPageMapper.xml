<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gwan.mypage.mapper.MyPageMapper">

	<!-- 예약내역 -->
	<!-- 방문 예정 -->
	<select id="willVisit" resultType="mp">
	<![CDATA[
		SELECT b.hotel_name, b.location_detail, b.checkin_date, b.checkout_date, b.hotel_phone, b.room_name, b.reservation_id
		FROM (SELECT rownum rn, a.*
		      FROM (SELECT *
		            FROM reservation r JOIN hotel h
		            ON (h.hotel_id = r.hotel_id)
		            JOIN room_info i
		            ON (r.room_id = i.room_id)
		            WHERE r.member_id = #{memberId}
		            AND TO_CHAR(SYSDATE) < TO_CHAR(r.checkout_date)
		            AND TO_CHAR(SYSDATE) < TO_CHAR(r.checkin_date)
		            ORDER BY 1 DESC) a
		       WHERE rownum <= #{page} * 5) b
		WHERE b.rn > (#{page} - 1) * 5
		ORDER BY checkin_date
	]]>
	</select>
	
	<!-- 방문 취소 -->
	<delete id="deleteWillVisit" parameterType="int">
		DELETE FROM reservation WHERE reservation_id = #{reservationId}
	</delete>
	
	<!-- 결제취소 -->
	
	<!-- 방문 예정 건수 조회(페이징) -->
	<select id="readWillvisitPageCount" resultType="int">
		SELECT count(*) FROM reservation
		WHERE member_id = #{memberId}
		AND TO_CHAR(SYSDATE) <![CDATA[<]]> TO_CHAR(checkout_date)
		AND TO_CHAR(SYSDATE) <![CDATA[<]]> TO_CHAR(checkin_date)
	</select>
	
	<!-- 방문 중 -->
	<select id="visiting" resultType="mp">
	<![CDATA[
		SELECT b.hotel_name, b.location_detail, b.checkin_date, b.checkout_date, b.hotel_phone, b.room_name, b.reservation_id
		FROM (SELECT rownum rn, a.*
		      FROM (SELECT *
		            FROM reservation r JOIN hotel h
		            ON (h.hotel_id = r.hotel_id)
		            JOIN room_info i
		            ON (r.room_id = i.room_id)
		            WHERE r.member_id = #{memberId}
				    AND TO_CHAR(SYSDATE) <= TO_CHAR(r.checkout_date-1)
				    AND TO_CHAR(SYSDATE) >= TO_CHAR(r.checkin_date)
		            ORDER BY 1 DESC) a
		       WHERE rownum <= #{page} * 5) b
		WHERE b.rn > (#{page} - 1) * 5
		ORDER BY checkin_date
	]]>
	</select>
	
	<!-- 방문 중 건수 조회(페이징) -->
	<select id="readvisitingPageCount" resultType="int">
		SELECT count(*) FROM reservation
		WHERE member_id = #{memberId}
		AND TO_CHAR(SYSDATE) <![CDATA[<=]]> TO_CHAR(checkout_date)
		AND TO_CHAR(SYSDATE) <![CDATA[>=]]> TO_CHAR(checkin_date)
	</select>

	<!-- 방문 완료 -->
	<select id="visited" resultType="mp">
	<![CDATA[
		SELECT b.hotel_name, b.location_detail, b.checkin_date, b.checkout_date, b.hotel_phone, b.room_name, b.reservation_id
		FROM (SELECT rownum rn, a.*
		      FROM (SELECT *
		            FROM reservation r JOIN hotel h
		            ON (h.hotel_id = r.hotel_id)
		            JOIN room_info i
		            ON (r.room_id = i.room_id)
		            WHERE r.member_id = #{memberId}
		            AND TO_CHAR(SYSDATE) > TO_CHAR(r.checkout_date)
		            ORDER BY 1 DESC) a
		       WHERE rownum <= #{page} * 5) b
		WHERE b.rn > (#{page} - 1) * 5
		ORDER BY checkin_date
	]]>
	</select>
	
	<!-- 방문 중 건수 조회(페이징) -->
	<select id="readvisitedPageCount" resultType="int">
		SELECT count(*) FROM reservation
		WHERE member_id = #{memberId}
		AND TO_CHAR(SYSDATE) <![CDATA[>]]> TO_CHAR(checkout_date)
	</select>
	
	
	<!-- 위시리스트  -->
	<!-- 위시리스트 숙소 조회 -->
	<select id="readWishList" resultType="mp">
	
		<![CDATA[
		SELECT b.hotel_name, b.hotel_location1, b.hotel_location2, b.hotel_thema, b.room_price, b.wishlist_id, b.hotel_image
		FROM (SELECT rownum rn, a.*
			FROM (SELECT *
		    	  FROM hotel h JOIN (SELECT hotel_id, room_price
		                    		 FROM (SELECT hotel_id, room_price,
		                            			  ROW_NUMBER() OVER(PARTITION BY hotel_id ORDER BY hotel_id) as hp
		                        		   FROM room_info)
		                    			   WHERE hp = 1
		                        		   AND hotel_id IN (SELECT hotel_id
		                                   					FROM wishlist
		                                   					WHERE member_id = #{memberId})) r
		    	  ON (h.hotel_id = r.hotel_id)
		    	  JOIN wishlist w
		    	  ON (h.hotel_id = w.hotel_id)
		    	  WHERE member_id = #{memberId}
		    	  ORDER BY 1 DESC) a
			WHERE rownum <= #{page} * 10 ) b
		WHERE b.rn > (#{page} - 1) * 10
		]]>
	
	</select>
	
	<!-- 위시리스트 단건 삭제 -->
	<delete id="deleteWishList" parameterType="int">
		DELETE FROM wishlist WHERE wishlist_id = #{wishlistId}
	</delete>
	
	<!-- 위시리스트 건수 조회 -->
	<select id="readWishPageCount" resultType="int">
		SELECT count(*) FROM wishlist WHERE member_id = #{memberId}
	</select>
	
	<!-- 보유쿠폰함 -->
	<!-- 쿠폰 조회 -->
	<select id="readCoupon" parameterType="mp">
		SELECT coupon_name, coupon_start, coupon_end, coupon_range, sale_per, sale_pri
		FROM coupon WHERE member_id = #{memberId}
		AND TO_CHAR(SYSDATE) <![CDATA[>=]]> TO_CHAR(coupon_start)
		AND TO_CHAR(SYSDATE) <![CDATA[<=]]> TO_CHAR(coupon_end)
		AND coupon_check = 1
		ORDER BY coupon_id
	</select>
	
	
	<!-- 회원정보수정 -->
	<update id="updateMemberInfo" parameterType="lp">
		UPDATE member
		<set>
			<if test="memberProfile != null and memberProfile != ''">member_profile = #{memberProfile},</if>
	        <if test="memberEmail != null and memberEmail != ''">member_email = #{memberEmail},</if>
	        <if test="memberPhone != null and memberPhone != ''">member_phone = #{memberPhone},</if>
	        <if test="memberNickname != null and memberNickname != ''">member_nickname = #{memberNickname},</if>
	        <if test="memberThema != null and memberThema != ''">member_thema = #{memberThema},</if>
	        <if test="memberPw != null and memberPw != ''">member_pw = #{memberPw}</if>
		</set>
		WHERE member_id=#{memberId}
	</update>
	
	<!-- Q&A -->
	<!-- 자주묻는 질문 -->
	<select id="readQnaBest" resultType="mp">
	SELECT qna_title, qna_content, answer_content, qna_type, answer_check
	FROM qna WHERE answer_check = '답변완료'
	AND qna_type = (SELECT qna_type
    	            FROM (
                        SELECT qna_type, COUNT(*) AS type_count,
                        RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
                        FROM qna
                        GROUP BY qna_type) subquery
                        WHERE rank = 1)
	</select>
	<!-- 자기 질문 -->
	<select id="readQnaSelf" resultType="mp">
		SELECT qna_title, qna_content, answer_content, qna_type, qna_date, answer_date, answer_check
		FROM qna 
		WHERE member_id = #{memberId}
		ORDER BY qna_id DESC
	</select>
	
	<insert id="createQnaQ" parameterType="mp">
		INSERT INTO qna(qna_id, member_id, qna_title, qna_content, qna_type)
		VALUES ((SELECT NVL(MAX(qna_id), 0) + 1 FROM qna), #{memberId}, #{qnaTitle}, #{qnaContent}, #{qnaType})
	</insert>
	
	<!-- 메세지함 -->
	<!-- 전체 유저 조회(프로필), 본인제외-->
	<select id="readProfile" resultType="mp">
		SELECT member_nickname, member_profile, member_id FROM member WHERE member_id != #{memberId}
		ORDER BY member_nickname
	</select>
	
	<!-- 프로필 세부 조회, 메세지 교환한 사람들만 -->
	<select id="readProfileMessage" resultType="mp">
		SELECT u.member_nickname, u.member_profile, m.message_id, u.member_id,
			CASE
	           WHEN LENGTH(m.message_content) > 10 THEN SUBSTR(m.message_content, 1, 10) || '...'
	           ELSE m.message_content
	        END AS message_content, m.message_img, m.message_date, m.message_check, m.message_delete
		FROM(
		        SELECT member_id, MAX(message_id) AS mi
		        FROM message
		        WHERE message_delete = 1
		        GROUP BY member_id
		        HAVING member_id != #{memberId}) c
		JOIN member u ON c.member_id = u.member_id
		JOIN message m ON c.mi = m.message_id
		ORDER BY message_id DESC
	</select>
	
	<!-- 메세지내역, 특정인, 삭제 제외-->
	<select id="readMessage" resultType="mp">
		SELECT *
		FROM message
		WHERE ((member_id=#{memberId} AND member_id2=#{memberId2})
		    OR (member_id=#{memberId2} AND member_id2=#{memberId}))
	    AND message_delete=1
		ORDER BY message_id DESC
	</select>
	
	<!-- 메세지내역, 특정인, 삭제 포함-->
	<select id="readAllMessage" resultType="mp">
		SELECT *
		FROM message
		WHERE (member_id=#{memberId} AND member_id2=#{memberId2})
		    OR (member_id=#{memberId2} AND member_id2=#{memberId})
		ORDER BY message_id DESC
	</select>
	
	<!-- 메세지 생성 -->
	<insert id="createMessage" parameterType="mp">
		INSERT INTO message (message_id, member_id, member_id2, message_content, message_time, message_time2, message_apm)
		VALUES(message_seq.nextval, #{memberId}, #{memberId2}, #{messageContent}, #{messageTime}, #{messageTime2}, #{message_apm})
	</insert>
	
	<!-- 메세지 삭제(업데이트) -->
	<update id="updateMessage" parameterType="mp">
		UPDATE message SET message_delete=2 WHERE message_id=#{messageId}
	</update>
</mapper>